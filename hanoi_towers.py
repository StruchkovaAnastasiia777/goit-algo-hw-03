"""
Ханойські вежі — рекурсивний алгоритм з логуванням станів 🧠

🔍 Що робить ця програма:
- Імітує процес переміщення дисків зі стрижня A на стрижень C
- Дотримується правил: один диск за раз, менший не кладеться на більший
- Виводить покроково:
    • Який диск переміщується і куди
    • Стан усіх стрижнів після кожного кроку

📥 Вхідні дані:
- Кількість дисків (n), вводиться вручну через `input()`

📤 Вивід:
- Початковий стан стрижнів
- Послідовність дій: переміщення дисків
- Проміжні стани після кожного кроку
- Кінцевий стан

▶️ Приклад запуску:
    python hanoi_towers.py
    Введіть кількість дисків (1 або більше)

🧩 Цей скрипт є бонусним завданням до теми «Рекурсія»
"""

def mini_hanoi(n, source, target, auxiliary, step=1):
    """
    Рекурсивне вирішення задачі Ханойських веж.
    Повертає загальну кількість кроків.
    """
    if n == 1:
        print(f"│ Крок {step}: \033[96mПеренести диск 1 з {source} на {target}\033[0m")
        return step + 1
    step = mini_hanoi(n - 1, source, auxiliary, target, step)
    print(f"│ Крок {step}: \033[96mПеренести диск {n} з {source} на {target}\033[0m")
    step += 1
    step = mini_hanoi(n - 1, auxiliary, target, source, step)
    return step

def main():
    """
    Основна функція з введенням і рамкою навколо результату.
    """
    try:
        n = int(input("Введіть кількість дисків (n >= 1): "))
        if n < 1:
            raise ValueError("Кількість дисків повинна бути 1 або більше.")

        print("\n╭" + "─" * 50)
        print("│ 📦  Рішення задачі Ханойських веж:\n│")

        total_steps = mini_hanoi(n, "A", "C", "B")

        print("│\n│ ✅ Завершено.")
        print(f"│ 🔁 Всього кроків: {total_steps - 1}")
        print("╰" + "─" * 50)

    except KeyboardInterrupt:
        print("\n❗ Програма перервана користувачем.")
    except ValueError as e:
        print(f"❗ Помилка: {e}")

if __name__ == "__main__":
    main()