"""
–°–Ω—ñ–∂–∏–Ω–∫–∞ –ö–æ—Ö–∞ ‚ùÑÔ∏è ‚Äî —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–µ –º–∞–ª—é–≤–∞–Ω–Ω—è —Ñ—Ä–∞–∫—Ç–∞–ª—É

üîç –©–æ —Ä–æ–±–∏—Ç—å —Ü—è –ø—Ä–æ–≥—Ä–∞–º–∞:
- –ë—É–¥—É—î —Ñ—Ä–∞–∫—Ç–∞–ª ¬´—Å–Ω—ñ–∂–∏–Ω–∫–∞ –ö–æ—Ö–∞¬ª –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
- –ú–∞–ª—é—î —Ç—Ä–∏ —Å—Ç–æ—Ä–æ–Ω–∏ —Å–Ω—ñ–∂–∏–Ω–∫–∏ —à–ª—è—Ö–æ–º –∑–∞–º—ñ–Ω–∏ –∫–æ–∂–Ω–æ—ó –ª—ñ–Ω—ñ—ó –Ω–∞ –ª–∞–º–∞–Ω—É —Ñ—ñ–≥—É—Ä—É
- –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —É –≥—Ä–∞—Ñ—ñ—á–Ω–æ–º—É –≤—ñ–∫–Ω—ñ turtle

üì• –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ:
- –†—ñ–≤–µ–Ω—å —Ä–µ–∫—É—Ä—Å—ñ—ó (—Ü—ñ–ª–µ —á–∏—Å–ª–æ >= 0), –≤–≤–æ–¥–∏—Ç—å—Å—è –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ `input()`

üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç:
- –ü–æ–±—É–¥–æ–≤–∞ —Å–Ω—ñ–∂–∏–Ω–∫–∏ —É –≤—ñ–∫–Ω—ñ turtle
- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
- –í—ñ–∫–Ω–æ –∑–∞–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∫–ª—ñ–∫—É –º–∏—à–∫–æ—é

‚ñ∂Ô∏è –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø—É—Å–∫—É:
    python koch_snowflake.py
    –í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Ä–µ–∫—É—Ä—Å—ñ—ó (0 –∞–±–æ –±—ñ–ª—å—à–µ): 3

üí° –ß–∏–º –±—ñ–ª—å—à–∏–π —Ä—ñ–≤–µ–Ω—å ‚Äî —Ç–∏–º —Å–∫–ª–∞–¥–Ω—ñ—à–∏–π —Ñ—Ä–∞–∫—Ç–∞–ª —ñ –¥–æ–≤—à–∏–π —á–∞—Å –ø–æ–±—É–¥–æ–≤–∏

üß© –°–∫—Ä–∏–ø—Ç —î —á–∞—Å—Ç–∏–Ω–æ—é –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ —Ç–µ–º–∏ ¬´–†–µ–∫—É—Ä—Å—ñ—è¬ª
"""

import turtle
import argparse
import sys

def koch_curve(t: turtle.Turtle, order: int, size: float):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –∫—Ä–∏–≤–æ—ó –ö–æ—Ö–∞."""
    if order == 0:
        t.forward(size)
    else:
        for angle in [60, -120, 60, 0]:
            koch_curve(t, order - 1, size / 3)
            t.left(angle)

def draw_koch_snowflake(order: int):
    """–ú–∞–ª—é—î —Å–Ω—ñ–∂–∏–Ω–∫—É –ö–æ—Ö–∞ –∑–∞–¥–∞–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è."""
    screen = turtle.Screen()
    screen.title(f"Koch Snowflake (order {order})")
    t = turtle.Turtle()
    t.speed(0)
    t.penup()
    t.goto(-150, 90)
    t.pendown()

    for _ in range(3):
        koch_curve(t, order, 300)
        t.right(120)

    screen.mainloop()

def main():
    parser = argparse.ArgumentParser(description="–ü–æ–±—É–¥–æ–≤–∞ —Å–Ω—ñ–∂–∏–Ω–∫–∏ –ö–æ—Ö–∞.")
    parser.add_argument("order", type=int, nargs="?", help="–†—ñ–≤–µ–Ω—å —Ä–µ–∫—É—Ä—Å—ñ—ó (0 –∞–±–æ –±—ñ–ª—å—à–µ)")
    args = parser.parse_args()

    # –Ø–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ ‚Äî –∑–∞–ø–∏—Ç–∞—Ç–∏ —á–µ—Ä–µ–∑ input()
    if args.order is None:
        try:
            order = int(input("–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Ä–µ–∫—É—Ä—Å—ñ—ó (0 –∞–±–æ –±—ñ–ª—å—à–µ): "))
        except ValueError:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ.")
            sys.exit(1)
    else:
        order = args.order

    if order < 0:
        print("‚ùå –†—ñ–≤–µ–Ω—å —Ä–µ–∫—É—Ä—Å—ñ—ó –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥‚Äô—î–º–Ω–∏–º.")
        sys.exit(1)

    draw_koch_snowflake(order)

if __name__ == "__main__":
    main()
